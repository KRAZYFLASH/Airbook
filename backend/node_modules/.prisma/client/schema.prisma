generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(cuid())
  name           String
  email          String         @unique
  password       String
  phone          String?
  dateOfBirth    DateTime?
  nationality    String?
  passportNumber String?
  role           String         @default("USER")
  isActive       Boolean        @default(true)
  isVerified     Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  bookings       Booking[]
  notifications  Notification[]
  payments       Payment[]
  reviews        Review[]

  @@map("users")
}

model Country {
  id           String        @id @default(cuid())
  name         String        @unique
  code         String        @unique
  continent    String
  currency     String
  timezone     String
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  airlines     Airline[]
  airports     Airport[]
  cities       City[]
  destinations Destination[]

  @@index([code])
  @@map("countries")
}

model City {
  id           String        @id @default(cuid())
  name         String
  countryId    String
  state        String?
  population   Int?
  timezone     String?
  lat          Float?
  lon          Float?
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  airports     Airport[]
  country      Country       @relation(fields: [countryId], references: [id])
  destinations Destination[]

  @@index([countryId])
  @@index([name])
  @@map("cities")
}

model Airport {
  id               String        @id @default(cuid())
  name             String
  iataCode         String?       @unique
  icaoCode         String?       @unique
  cityId           String
  countryId        String
  municipality     String?
  lat              Float?
  lon              Float?
  elevation        Int?
  timezone         String?
  isActive         Boolean       @default(true)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  city             City          @relation(fields: [cityId], references: [id])
  country          Country       @relation(fields: [countryId], references: [id])
  destinations     Destination[]
  arrivalFlights   Flight[]      @relation("FlightArrival")
  departureFlights Flight[]      @relation("FlightDeparture")

  @@index([countryId])
  @@index([cityId])
  @@index([iataCode])
  @@index([icaoCode])
  @@index([name])
  @@map("airports")
}

model Airline {
  id                   String                @id @default(cuid())
  name                 String
  code                 String                @unique
  icaoCode             String?               @unique
  countryId            String
  logo                 String?
  description          String?
  website              String?
  isActive             Boolean               @default(true)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  aircraft             Aircraft[]
  country              Country               @relation(fields: [countryId], references: [id])
  flights              Flight[]
  adminFlightSchedules AdminFlightSchedule[]

  @@index([code])
  @@index([countryId])
  @@index([name])
  @@map("airlines")
}

model AircraftType {
  id           String     @id @default(cuid())
  manufacturer String
  model        String
  variant      String?
  capacity     Int
  range        Int?
  cruiseSpeed  Int?
  fuelCapacity Int?
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  aircraft     Aircraft[]

  @@unique([manufacturer, model, variant])
  @@index([manufacturer])
  @@index([model])
  @@map("aircraft_types")
}

model Aircraft {
  id             String       @id @default(cuid())
  registration   String       @unique
  airlineId      String
  aircraftTypeId String
  name           String?
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  aircraftType   AircraftType @relation(fields: [aircraftTypeId], references: [id])
  airline        Airline      @relation(fields: [airlineId], references: [id])
  flights        Flight[]

  @@index([airlineId])
  @@index([aircraftTypeId])
  @@index([registration])
  @@map("aircraft")
}

model Destination {
  id           String      @id @default(cuid())
  name         String
  cityId       String
  countryId    String
  airportId    String
  description  String?
  imageUrl     String?
  category     String
  rating       Float?
  isActive     Boolean     @default(true)
  isFeatured   Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  bookingsTo   Booking[]   @relation("BookingDestination")
  bookingsFrom Booking[]   @relation("BookingFromDestination")
  airport      Airport     @relation(fields: [airportId], references: [id])
  city         City        @relation(fields: [cityId], references: [id])
  country      Country     @relation(fields: [countryId], references: [id])
  promotions   Promotion[]
  reviews      Review[]

  @@index([countryId])
  @@index([cityId])
  @@index([airportId])
  @@index([category])
  @@index([isFeatured])
  @@map("destinations")
}

model Flight {
  id                 String           @id @default(cuid())
  flightNumber       String
  airlineId          String
  aircraftId         String
  departureAirportId String
  arrivalAirportId   String
  departureTime      DateTime
  arrivalTime        DateTime
  duration           Int
  distance           Int?
  status             String           @default("SCHEDULED")
  gate               String?
  terminal           String?
  isActive           Boolean          @default(true)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  bookings           Booking[]
  flightSchedules    FlightSchedule[]
  aircraft           Aircraft         @relation(fields: [aircraftId], references: [id])
  airline            Airline          @relation(fields: [airlineId], references: [id])
  arrivalAirport     Airport          @relation("FlightArrival", fields: [arrivalAirportId], references: [id])
  departureAirport   Airport          @relation("FlightDeparture", fields: [departureAirportId], references: [id])

  @@index([airlineId])
  @@index([aircraftId])
  @@index([departureAirportId])
  @@index([arrivalAirportId])
  @@index([flightNumber])
  @@index([departureTime])
  @@index([status])
  @@map("flights")
}

model FlightSchedule {
  id             String    @id @default(cuid())
  flightId       String
  classType      String
  availableSeats Int
  totalSeats     Int
  basePrice      Float
  currentPrice   Float
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  bookings       Booking[]
  flight         Flight    @relation(fields: [flightId], references: [id], onDelete: Cascade)

  @@index([flightId])
  @@index([classType])
  @@index([currentPrice])
  @@map("flight_schedules")
}

model Booking {
  id                String            @id @default(cuid())
  bookingReference  String            @unique
  userId            String
  flightId          String?
  flightScheduleId  String?
  destinationId     String
  fromDestinationId String
  departureDate     DateTime
  returnDate        DateTime?
  passengerCount    Int
  bookingClass      String
  totalPrice        Float
  taxes             Float             @default(0)
  fees              Float             @default(0)
  discountAmount    Float             @default(0)
  finalPrice        Float
  status            String            @default("PENDING")
  paymentStatus     String            @default("UNPAID")
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  destination       Destination       @relation("BookingDestination", fields: [destinationId], references: [id])
  flight            Flight?           @relation(fields: [flightId], references: [id])
  flightSchedule    FlightSchedule?   @relation(fields: [flightScheduleId], references: [id])
  fromDestination   Destination       @relation("BookingFromDestination", fields: [fromDestinationId], references: [id])
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  notifications     Notification[]
  passengers        PassengerDetail[]
  payments          Payment[]

  @@index([userId])
  @@index([flightId])
  @@index([status])
  @@index([paymentStatus])
  @@index([departureDate])
  @@index([bookingReference])
  @@map("bookings")
}

model PassengerDetail {
  id              String    @id @default(cuid())
  bookingId       String
  title           String
  firstName       String
  lastName        String
  dateOfBirth     DateTime
  nationality     String
  passportNumber  String?
  passportExpiry  DateTime?
  seatNumber      String?
  mealPreference  String?
  specialRequests String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  booking         Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([bookingId])
  @@map("passenger_details")
}

model Payment {
  id              String    @id @default(cuid())
  bookingId       String
  userId          String
  amount          Float
  currency        String    @default("IDR")
  paymentMethod   String
  paymentProvider String?
  transactionId   String?   @unique
  status          String    @default("PENDING")
  paidAt          DateTime?
  failedReason    String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  booking         Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  user            User      @relation(fields: [userId], references: [id])

  @@index([bookingId])
  @@index([userId])
  @@index([status])
  @@index([transactionId])
  @@map("payments")
}

model Review {
  id            String       @id @default(cuid())
  userId        String
  destinationId String?
  bookingId     String?
  rating        Int
  title         String?
  comment       String?
  isVerified    Boolean      @default(false)
  isPublished   Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  destination   Destination? @relation(fields: [destinationId], references: [id])
  user          User         @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([destinationId])
  @@index([rating])
  @@index([isPublished])
  @@map("reviews")
}

model Promotion {
  id            String       @id @default(cuid())
  title         String
  description   String?
  code          String?      @unique
  discountType  String
  discountValue Float
  minPurchase   Float?
  maxDiscount   Float?
  startDate     DateTime
  endDate       DateTime
  usageLimit    Int?
  usedCount     Int          @default(0)
  isActive      Boolean      @default(true)
  destinationId String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  destination   Destination? @relation(fields: [destinationId], references: [id])

  @@index([code])
  @@index([startDate])
  @@index([endDate])
  @@index([isActive])
  @@map("promotions")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  bookingId String?
  title     String
  message   String
  type      String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  booking   Booking? @relation(fields: [bookingId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([bookingId])
  @@index([isRead])
  @@index([type])
  @@map("notifications")
}

model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  category    String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([key])
  @@index([category])
  @@map("system_configs")
}

// Admin Flight Schedules - Simple structure for admin panel
model AdminFlightSchedule {
  id          String   @id @default(cuid())
  airlineId   String
  flightNo    String
  origin      String // IATA code like "CGK"
  destination String // IATA code like "DPS"
  departure   DateTime // Full datetime
  arrival     DateTime // Full datetime
  basePrice   Float
  seats       Int
  status      String   @default("ON_TIME") // "ON_TIME" | "DELAYED" | "CANCELLED"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  airline     Airline  @relation(fields: [airlineId], references: [id], onDelete: Cascade)

  @@index([airlineId])
  @@index([flightNo])
  @@index([origin])
  @@index([destination])
  @@index([departure])
  @@index([status])
  @@map("admin_flight_schedules")
}

// Admin Promotions - Simple structure for admin panel
model AdminPromotion {
  id              String   @id @default(cuid())
  title           String
  code            String   @unique
  discountPercent Int // 0-100
  startsAt        DateTime
  endsAt          DateTime
  conditions      String?
  active          Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([code])
  @@index([startsAt])
  @@index([endsAt])
  @@index([active])
  @@map("admin_promotions")
}
