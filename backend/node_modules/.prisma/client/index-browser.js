
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  phone: 'phone',
  dateOfBirth: 'dateOfBirth',
  nationality: 'nationality',
  passportNumber: 'passportNumber',
  role: 'role',
  isActive: 'isActive',
  isVerified: 'isVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CountryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  continent: 'continent',
  currency: 'currency',
  timezone: 'timezone',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CityScalarFieldEnum = {
  id: 'id',
  name: 'name',
  countryId: 'countryId',
  state: 'state',
  population: 'population',
  timezone: 'timezone',
  lat: 'lat',
  lon: 'lon',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AirportScalarFieldEnum = {
  id: 'id',
  name: 'name',
  iataCode: 'iataCode',
  icaoCode: 'icaoCode',
  cityId: 'cityId',
  countryId: 'countryId',
  municipality: 'municipality',
  lat: 'lat',
  lon: 'lon',
  elevation: 'elevation',
  timezone: 'timezone',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AirlineScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  icaoCode: 'icaoCode',
  countryId: 'countryId',
  logo: 'logo',
  description: 'description',
  website: 'website',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AircraftTypeScalarFieldEnum = {
  id: 'id',
  manufacturer: 'manufacturer',
  model: 'model',
  variant: 'variant',
  capacity: 'capacity',
  range: 'range',
  cruiseSpeed: 'cruiseSpeed',
  fuelCapacity: 'fuelCapacity',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AircraftScalarFieldEnum = {
  id: 'id',
  registration: 'registration',
  airlineId: 'airlineId',
  aircraftTypeId: 'aircraftTypeId',
  name: 'name',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DestinationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  cityId: 'cityId',
  countryId: 'countryId',
  airportId: 'airportId',
  description: 'description',
  imageUrl: 'imageUrl',
  category: 'category',
  rating: 'rating',
  isActive: 'isActive',
  isFeatured: 'isFeatured',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FlightScalarFieldEnum = {
  id: 'id',
  flightNumber: 'flightNumber',
  airlineId: 'airlineId',
  aircraftId: 'aircraftId',
  departureAirportId: 'departureAirportId',
  arrivalAirportId: 'arrivalAirportId',
  departureTime: 'departureTime',
  arrivalTime: 'arrivalTime',
  duration: 'duration',
  distance: 'distance',
  status: 'status',
  gate: 'gate',
  terminal: 'terminal',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FlightScheduleScalarFieldEnum = {
  id: 'id',
  flightId: 'flightId',
  classType: 'classType',
  availableSeats: 'availableSeats',
  totalSeats: 'totalSeats',
  basePrice: 'basePrice',
  currentPrice: 'currentPrice',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BookingScalarFieldEnum = {
  id: 'id',
  bookingReference: 'bookingReference',
  userId: 'userId',
  flightId: 'flightId',
  flightScheduleId: 'flightScheduleId',
  destinationId: 'destinationId',
  fromDestinationId: 'fromDestinationId',
  departureDate: 'departureDate',
  returnDate: 'returnDate',
  passengerCount: 'passengerCount',
  bookingClass: 'bookingClass',
  totalPrice: 'totalPrice',
  taxes: 'taxes',
  fees: 'fees',
  discountAmount: 'discountAmount',
  finalPrice: 'finalPrice',
  status: 'status',
  paymentStatus: 'paymentStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PassengerDetailScalarFieldEnum = {
  id: 'id',
  bookingId: 'bookingId',
  title: 'title',
  firstName: 'firstName',
  lastName: 'lastName',
  dateOfBirth: 'dateOfBirth',
  nationality: 'nationality',
  passportNumber: 'passportNumber',
  passportExpiry: 'passportExpiry',
  seatNumber: 'seatNumber',
  mealPreference: 'mealPreference',
  specialRequests: 'specialRequests',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  bookingId: 'bookingId',
  userId: 'userId',
  amount: 'amount',
  currency: 'currency',
  paymentMethod: 'paymentMethod',
  paymentProvider: 'paymentProvider',
  transactionId: 'transactionId',
  status: 'status',
  paidAt: 'paidAt',
  failedReason: 'failedReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  destinationId: 'destinationId',
  bookingId: 'bookingId',
  rating: 'rating',
  title: 'title',
  comment: 'comment',
  isVerified: 'isVerified',
  isPublished: 'isPublished',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PromotionScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  code: 'code',
  discountType: 'discountType',
  discountValue: 'discountValue',
  minPurchase: 'minPurchase',
  maxDiscount: 'maxDiscount',
  startDate: 'startDate',
  endDate: 'endDate',
  usageLimit: 'usageLimit',
  usedCount: 'usedCount',
  isActive: 'isActive',
  destinationId: 'destinationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  bookingId: 'bookingId',
  title: 'title',
  message: 'message',
  type: 'type',
  isRead: 'isRead',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SystemConfigScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  category: 'category',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdminFlightScheduleScalarFieldEnum = {
  id: 'id',
  airlineId: 'airlineId',
  flightNo: 'flightNo',
  origin: 'origin',
  destination: 'destination',
  departure: 'departure',
  arrival: 'arrival',
  basePrice: 'basePrice',
  seats: 'seats',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdminPromotionScalarFieldEnum = {
  id: 'id',
  title: 'title',
  code: 'code',
  discountPercent: 'discountPercent',
  startsAt: 'startsAt',
  endsAt: 'endsAt',
  conditions: 'conditions',
  active: 'active',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  Country: 'Country',
  City: 'City',
  Airport: 'Airport',
  Airline: 'Airline',
  AircraftType: 'AircraftType',
  Aircraft: 'Aircraft',
  Destination: 'Destination',
  Flight: 'Flight',
  FlightSchedule: 'FlightSchedule',
  Booking: 'Booking',
  PassengerDetail: 'PassengerDetail',
  Payment: 'Payment',
  Review: 'Review',
  Promotion: 'Promotion',
  Notification: 'Notification',
  SystemConfig: 'SystemConfig',
  AdminFlightSchedule: 'AdminFlightSchedule',
  AdminPromotion: 'AdminPromotion'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
