generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  password  String
  role      String    @default("USER")
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relations
  bookings  Booking[]

  @@map("users")
}

model Destination {
  id          String   @id @default(cuid())
  name        String
  city        String
  country     String
  airport     String
  code        String   @unique
  description String?
  imageUrl    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  bookingsTo   Booking[] @relation("BookingDestination")
  bookingsFrom Booking[] @relation("BookingFromDestination")

  @@index([code])
  @@index([country])
  @@index([city])
  @@map("destinations")
}

model Airport {
  id           Int     @id @default(autoincrement())
  name         String
  iata_code    String?
  icao_code    String?
  iso_country  String
  municipality String?
  lat          Float?
  lon          Float?

  @@index([iso_country])
  @@index([iata_code])
  @@index([name])
  @@map("airports")
}

model Booking {
  id                String   @id @default(cuid())
  userId            String
  destinationId     String
  fromDestinationId String
  departureDate     DateTime
  returnDate        DateTime?
  passengers        Int
  bookingClass      String   // ECONOMY, BUSINESS, FIRST
  totalPrice        Float
  status            String   @default("PENDING") // PENDING, CONFIRMED, CANCELLED, COMPLETED
  bookingReference  String   @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  destination    Destination @relation("BookingDestination", fields: [destinationId], references: [id])
  fromDestination Destination @relation("BookingFromDestination", fields: [fromDestinationId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([departureDate])
  @@index([bookingReference])
  @@map("bookings")
}
