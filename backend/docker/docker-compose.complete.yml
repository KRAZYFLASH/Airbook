# Complete Docker Compose for Airbook Project
# Includes all necessary databases and services

services:
  # PostgreSQL - Main Database
  postgres:
    image: postgres:15-alpine
    container_name: airbook_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: airbook_db
      POSTGRES_USER: airbook_user
      POSTGRES_PASSWORD: airbook_password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
    networks:
      - airbook_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airbook_user -d airbook_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # pgAdmin - Database Management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: airbook_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@airbook.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: "False"
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - airbook_network

  # Redis - Caching & Session Storage
  redis:
    image: redis:7-alpine
    container_name: airbook_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass airbook_redis_password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - airbook_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "airbook_redis_password", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Elasticsearch - Search Engine
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: airbook_elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - cluster.name=airbook-cluster
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - airbook_network
    healthcheck:
      test:
        ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kibana - Elasticsearch Dashboard
  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.0
    container_name: airbook_kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_NAME=airbook-kibana
    ports:
      - "5601:5601"
    networks:
      - airbook_network
    depends_on:
      elasticsearch:
        condition: service_healthy

  # MinIO - Object Storage
  minio:
    image: minio/minio:latest
    container_name: airbook_minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
      MINIO_REGION: us-east-1
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - airbook_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB - Document Database
  mongodb:
    image: mongo:7
    container_name: airbook_mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo_user
      MONGO_INITDB_ROOT_PASSWORD: mongo_password
      MONGO_INITDB_DATABASE: airbook_logs
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongodb/init:/docker-entrypoint-initdb.d
    networks:
      - airbook_network
    healthcheck:
      test:
        ["CMD", "mongosh", "--quiet", "--eval", "db.adminCommand('ping').ok"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RabbitMQ - Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: airbook_rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: rabbit_user
      RABBITMQ_DEFAULT_PASS: rabbit_password
      RABBITMQ_DEFAULT_VHOST: airbook
    ports:
      - "5672:5672" # AMQP port
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - airbook_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus - Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: airbook_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - airbook_network
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=30d"
      - "--web.enable-lifecycle"

  # Grafana - Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: airbook_grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: grafana_admin
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - airbook_network
    depends_on:
      - prometheus

  # MailHog - Email Testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: airbook_mailhog
    restart: unless-stopped
    ports:
      - "1025:1025" # SMTP port
      - "8025:8025" # Web UI
    networks:
      - airbook_network

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  minio_data:
    driver: local
  mongodb_data:
    driver: local
  rabbitmq_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  airbook_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
